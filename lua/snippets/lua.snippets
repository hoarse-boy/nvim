# Comments are possible
snippet fun
	function ${1:name}(${2:params})
		${0:$VISUAL}
	end

snippet upcase
	local ${1:var} = '${1/.*/\U\0/g}'

snippet choices
	print('My favorite language is: ${1|JavaScript,Lua,Rust|}')

snippet date
	Current date is `strftime('%c')`

# Custom tabstop order
snippet repeat
	repeat
		${2:what}
	while ${1:condition}
	
snippet del "comment FIX: TO DELETE"
	-- FIX: DELETE LATER

snippet fix "comment FIX:"
	-- FIX: ${1}

snippet todo "comment todo"
	-- TODO: ${1}

snippet note "comment note"
	-- NOTE: ${1}

snippet stylua_ignore "stylelua ignore comment"
	-- stylua: ignore

snippet lazy_keymap "lazy keymap"
	keys = {
		{ "${1:keymap ex => <leader>cR}", "<cmd>${2:cmd}<cr>", desc = "${3:description}" },
	}

snippet notify "generate notify with treesitter highlight"
	notify("${1:Message}", "${2:Notifation Type: info, warn, debug, or error}", {
		title = "${3:Title}",
		on_open = function(win)
			local buf = vim.api.nvim_win_get_buf(win)
			vim.api.nvim_buf_set_option(buf, "filetype", "${4:ex. markdown}")
		end,
	})

snippet add_lazy_plugin "generate lazy.nvim plugin table with return"
	return {
		"${1:git link}",
		event = "VeryLazy",
		-- enabled = false, -- disabled plugin
		-- dependencies = {},
		-- init = function() end, -- functions are always executed during startup
		-- opts = function(_, opts) end, -- use this to not overwrite this plugin config (usefull in lazyvim)
		keys = {
			-- { "<leader>l", "", desc = "+go.nvim" }, -- example
			-- { "<leader>ls", "<cmd>GoFillStruct<cr>", desc = "Fill Struct" }, -- example
      -- { "<s-tab>", function() require("luasnip").jump(-1) end,  mode = { "i", "s" }, desc = "luasnip tab", noremap = true, silent = true },
			{ "${2:define keymaps}", "${3:what the keys do}", desc = "${4:description}", mode = "${5:vim mode}" }
		},
		config = function(_, opts)
			require("${6:plugin name}").setup(${7:the plugin's lua table})
		end,
	}
